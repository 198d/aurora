<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.apache.aurora.scheduler.storage.db.JobUpdateDetailsMapper">
  <sql id="selectUpdateIdentity">
      (
        SELECT id
        FROM job_updates
        WHERE update_id = #{updateId}
      )
  </sql>

  <insert id="insert">
    INSERT INTO job_updates (
      job_key_id,
      update_id,
      user,
      instance_count,
      update_group_size,
      max_per_instance_failures,
      max_failed_instances,
      max_wait_to_instance_running_ms,
      min_wait_in_instance_running_ms,
      rollback_on_failure
    ) VALUES (
      (
        SELECT ID
        FROM job_keys
        WHERE role = #{summary.jobKey.role}
          AND environment = #{summary.jobKey.environment}
          AND name = #{summary.jobKey.name}
      ),
      #{summary.updateId},
      #{summary.user},
      #{configuration.instanceCount},
      #{configuration.settings.updateGroupSize},
      #{configuration.settings.maxPerInstanceFailures},
      #{configuration.settings.maxFailedInstances},
      #{configuration.settings.maxWaitToInstanceRunningMs},
      #{configuration.settings.minWaitInInstanceRunningMs},
      #{configuration.settings.rollbackOnFailure}
    )
  </insert>

  <insert id="insertLockToken">
    INSERT INTO job_update_locks (
      update_id,
      lock_token
    ) VALUES (
      <include refid="selectUpdateIdentity"/>,
      #{lockToken}
    )
  </insert>

  <insert id="insertTaskConfig" useGeneratedKeys="true" keyColumn="id" keyProperty="result.id">
    INSERT INTO job_update_configs (
      update_id,
      task_config,
      is_new
    ) VALUES (
      <include refid="selectUpdateIdentity"/>,
      #{config, typeHandler=org.apache.aurora.scheduler.storage.db.typehandlers.TaskConfigTypeHandler},
      #{isNew}
    )
  </insert>

  <insert id="insertTaskConfigInstances">
    INSERT INTO job_update_configs_to_instances (
      config_id,
      first,
      last
    ) VALUES
    <foreach item="element" collection="ranges" open="(" separator="),(" close=")">
      #{configId},
      #{element.first},
      #{element.last}
    </foreach>
  </insert>

  <insert id="insertInstanceOverrides">
    INSERT INTO job_updates_to_instance_overrides (
      update_id,
      first,
      last
    ) VALUES
    <foreach item="element" collection="ranges" open="(" separator="),(" close=")">
      <include refid="selectUpdateIdentity"/>,
      #{element.first},
      #{element.last}
    </foreach>
  </insert>

  <resultMap id="jobUpdateStateMap" type="org.apache.aurora.gen.JobUpdateState">
    <id column="update_id" />
    <result property="status"
            column="status"
            typeHandler="org.apache.aurora.scheduler.storage.db.typehandlers.JobUpdateStatusTypeHandler" />
  </resultMap>

  <resultMap id="jobUpdateSummaryMap" type="org.apache.aurora.gen.JobUpdateSummary">
    <id column="update_id" property="updateId"/>
    <association property="jobKey"
                 resultMap="org.apache.aurora.scheduler.storage.db.JobKeyMapper.jobKeyMap"
                 columnPrefix="jk_"/>
    <association property="state"
                 resultMap="jobUpdateStateMap"
                 columnPrefix="just_" />
  </resultMap>

  <resultMap id="rangeMap" type="org.apache.aurora.gen.Range">
    <id column="id" />
  </resultMap>

  <resultMap id="instanceConfigMap" type="org.apache.aurora.gen.InstanceTaskConfig">
    <id column="id" />
    <result property="task"
            column="task"
            typeHandler="org.apache.aurora.scheduler.storage.db.typehandlers.TaskConfigTypeHandler" />
    <collection property="instances" resultMap="rangeMap" columnPrefix="r_" notNullColumn="id" />
  </resultMap>

  <resultMap id="jobUpdateSettingsMap" type="org.apache.aurora.gen.JobUpdateSettings">
    <id column="id" />
    <collection property="updateOnlyTheseInstances"
                resultMap="rangeMap"
                columnPrefix="r_"
                notNullColumn="id" />
  </resultMap>

  <resultMap id="jobUpdateConfigurationMap" type="org.apache.aurora.gen.JobUpdateConfiguration">
    <id column="id" />
    <result property="newTaskConfig"
            column="new_task_config"
            typeHandler="org.apache.aurora.scheduler.storage.db.typehandlers.TaskConfigTypeHandler" />
    <association property="settings" resultMap="jobUpdateSettingsMap" columnPrefix="juse_"/>
    <collection property="oldTaskConfigs"
                resultMap="instanceConfigMap"
                columnPrefix="itc_"
                notNullColumn="id" />
  </resultMap>

  <resultMap id="jobUpdateMap" type="org.apache.aurora.gen.JobUpdate">
    <id column="u_id" />
    <association property="summary" resultMap="jobUpdateSummaryMap" columnPrefix="jusm_"/>
    <association property="configuration" resultMap="jobUpdateConfigurationMap" columnPrefix="juc_"/>
  </resultMap>

  <resultMap id="jobUpdateDetailsMap" type="org.apache.aurora.gen.storage.StoredJobUpdateDetails">
    <id column="u_id" />
    <association property="details.update" resultMap="jobUpdateMap" />
    <!--Using notNullColumn attribute is required below as LEFT JOIN with empty right side
    will produce an empty row.-->
    <collection property="details.updateEvents"
                ofType="org.apache.aurora.gen.JobUpdateEvent"
                columnPrefix="e_"
                notNullColumn="id">
      <id column="id" />
      <result property="status"
              column="status"
              typeHandler="org.apache.aurora.scheduler.storage.db.typehandlers.JobUpdateStatusTypeHandler" />
    </collection>
    <collection property="details.instanceEvents"
                ofType="org.apache.aurora.gen.JobInstanceUpdateEvent"
                columnPrefix="i_"
                notNullColumn="id">
      <id column="id" />
      <result property="action"
              column="action"
              typeHandler="org.apache.aurora.scheduler.storage.db.typehandlers.JobUpdateActionTypeHandler"/>
    </collection>
  </resultMap>

  <sql id="timestamps_inner_joins">
    INNER JOIN
    (
      SELECT
        e_s.update_id,
        e_s.status
      FROM job_update_events AS e_s
      INNER JOIN
      (
        SELECT
          update_id,
          MAX(timestamp_ms) AS timestamp_ms
        FROM job_update_events
        GROUP BY update_id
      ) AS e_t ON e_t.update_id = e_s.update_id AND e_t.timestamp_ms = e_s.timestamp_ms
    ) AS max_status ON max_status.update_id = u.id
    INNER JOIN
    (
      SELECT
        update_id,
        MIN(timestamp_ms) AS timestamp_ms
      FROM job_update_events
      GROUP BY update_id
    ) AS min_ts ON min_ts.update_id = u.id
    INNER JOIN
    (
      SELECT
        update_id,
        MAX(timestamp_ms) AS timestamp_ms
      FROM
      (
        SELECT
          update_id,
          timestamp_ms
        FROM job_update_events
        UNION ALL
        SELECT
          update_id,
          timestamp_ms
        FROM job_instance_update_events
      )
      GROUP BY update_id
    ) AS max_ts ON max_ts.update_id = u.id
  </sql>

  <select id="selectSummaries" resultMap="jobUpdateSummaryMap">
    SELECT
      u.update_id AS update_id,
      u.user AS user,
      max_status.status AS just_status,
      min_ts.timestamp_ms AS just_created_timestamp_ms,
      max_ts.timestamp_ms AS just_last_modified_timestamp_ms,
      j.id AS jk_id,
      j.role AS jk_role,
      j.environment AS jk_environment,
      j.name AS jk_name
    FROM job_updates AS u
    INNER JOIN job_keys AS j ON j.id = u.job_key_id
    <include refid="timestamps_inner_joins" />
    <if test="updateId != null || role != null || user != null || jobKey != null || updateStatuses != null || limit != 0 || offset != 0">
    WHERE TRUE
      <if test="updateId != null">AND u.update_id = #{updateId}</if>
      <if test="user != null">AND u.user = #{user}</if>
      <if test="role != null">AND j.role = #{role}</if>
      <if test="jobKey != null">
        AND j.role = #{jobKey.role}
        AND j.name = #{jobKey.name}
        AND j.environment = #{jobKey.environment}
      </if>
      <if test="updateStatuses != null">
        <if test="updateStatuses.size() > 0">
          AND (max_status.status IN
          <foreach item="element" collection="updateStatuses" open="(" separator="," close="))">
            #{element, typeHandler=org.apache.aurora.scheduler.storage.db.typehandlers.JobUpdateStatusTypeHandler}
          </foreach>
        </if>
      </if>
    </if>
    ORDER BY max_ts.timestamp_ms
    <if test="limit != 0">LIMIT #{limit}</if>
    <if test="offset != 0">OFFSET #{offset}</if>
  </select>

  <!--Column naming convention below follows the thrift object hierarchy and columnPrefix
    attributes used in associations.
    For example: jusm_just_status maps to JobUpdateSummary/JobUpdateState/status field.-->
  <sql id="job_update_columns">
      u.id AS u_id,
      u.update_id AS jusm_update_id,
      u.user AS jusm_user,
      max_status.status AS jusm_just_status,
      min_ts.timestamp_ms AS jusm_just_created_timestamp_ms,
      max_ts.timestamp_ms AS jusm_just_last_modified_timestamp_ms,
      j.id AS jusm_jk_id,
      j.role AS jusm_jk_role,
      j.environment AS jusm_jk_environment,
      j.name AS jusm_jk_name,
      u.id AS juc_juse_id,
      u.instance_count AS juc_instance_count,
      u.update_group_size AS juc_juse_update_group_size,
      u.max_per_instance_failures AS juc_juse_max_per_instance_failures,
      u.max_failed_instances AS juc_juse_max_failed_instances,
      u.max_wait_to_instance_running_ms AS juc_juse_max_wait_to_instance_running_ms,
      u.min_wait_in_instance_running_ms AS juc_juse_min_wait_in_instance_running_ms,
      u.rollback_on_failure AS juc_juse_rollback_on_failure,
      cn.id AS juc_id,
      cn.task_config AS juc_new_task_config,
      co.id AS juc_itc_id,
      co.task_config AS juc_itc_task,
      ci.id AS juc_itc_r_id,
      ci.first AS juc_itc_r_first,
      ci.last AS juc_itc_r_last,
      io.id AS juc_juse_r_id,
      io.first AS juc_juse_r_first,
      io.last AS juc_juse_r_last
  </sql>

  <sql id="job_update_to_configs_inner_joins">
    FROM job_updates AS u
    INNER JOIN job_keys AS j ON j.id = u.job_key_id
    INNER JOIN job_update_configs AS cn ON cn.update_id = u.id AND cn.is_new = TRUE
    INNER JOIN job_update_configs AS co ON co.update_id = u.id AND co.is_new = FALSE
    INNER JOIN job_update_configs_to_instances AS ci ON ci.config_id = co.id
  </sql>

  <sql id="job_update_to_instance_overrides_outer_join">
    LEFT OUTER JOIN job_updates_to_instance_overrides AS io ON io.update_id = u.id
  </sql>

  <sql id="unscoped_details_select">
    SELECT
      <include refid="job_update_columns" />,
      e.id AS e_id,
      e.status AS e_status,
      e.timestamp_ms AS e_timestamp_ms,
      i.id AS i_id,
      i.action AS i_action,
      i.instance_id AS i_instance_id,
      i.timestamp_ms AS i_timestamp_ms,
      l.lock_token AS lock_token
    <include refid="job_update_to_configs_inner_joins" />
    <include refid="timestamps_inner_joins" />
    <include refid="job_update_to_instance_overrides_outer_join" />
    LEFT OUTER JOIN job_update_events AS e ON e.update_id = u.id
    LEFT OUTER JOIN job_instance_update_events AS i ON i.update_id = u.id
    LEFT OUTER JOIN job_update_locks AS l on l.update_id = u.id
  </sql>

  <!--Ideally, update configuration columns could be derived from job_update_columns above but that
      hits against the limits of mybatis code reuse as specifying a common "juc_" column prefix
      in case of a standalone (no parent association) select appears to be impossible.-->
  <select id="selectConfiguration" resultMap="jobUpdateConfigurationMap">
    SELECT
      u.id AS juse_id,
      u.instance_count AS instance_count,
      u.update_group_size AS juse_update_group_size,
      u.max_per_instance_failures AS juse_max_per_instance_failures,
      u.max_failed_instances AS juse_max_failed_instances,
      u.max_wait_to_instance_running_ms AS juse_max_wait_to_instance_running_ms,
      u.min_wait_in_instance_running_ms AS juse_min_wait_in_instance_running_ms,
      u.rollback_on_failure AS juse_rollback_on_failure,
      cn.id AS id,
      cn.task_config AS new_task_config,
      co.id AS itc_id,
      co.task_config AS itc_task,
      ci.id AS itc_r_id,
      ci.first AS itc_r_first,
      ci.last AS itc_r_last,
      io.id AS juse_r_id,
      io.first AS juse_r_first,
      io.last AS juse_r_last
    <include refid="job_update_to_configs_inner_joins" />
    <include refid="job_update_to_instance_overrides_outer_join" />
    WHERE u.update_id = #{id}
  </select>

  <select id="selectUpdate" resultMap="jobUpdateMap">
    SELECT
      <include refid="job_update_columns" />
    <include refid="job_update_to_configs_inner_joins" />
    <include refid="timestamps_inner_joins" />
    <include refid="job_update_to_instance_overrides_outer_join" />
    WHERE u.update_id = #{id}
  </select>

  <select id="selectDetails" resultMap="jobUpdateDetailsMap">
    <include refid="unscoped_details_select"/>
    WHERE u.update_id = #{id}
    ORDER BY e_timestamp_ms, i_timestamp_ms
  </select>

  <select id="selectAllDetails" resultMap="jobUpdateDetailsMap">
    <include refid="unscoped_details_select"/>
  </select>

  <select id="selectLockToken" resultType="String">
    SELECT
      lock_token
    FROM job_update_locks AS l
    INNER JOIN job_updates u ON l.update_id = u.id
    WHERE u.update_id = #{id}
  </select>

  <delete id="truncate">
    DELETE FROM job_updates;
  </delete>
</mapper>
