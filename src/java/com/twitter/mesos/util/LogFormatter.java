package com.twitter.mesos.util;

import com.google.common.base.Function;
import com.google.common.base.Throwables;
import com.google.common.collect.MapMaker;

import java.util.Calendar;
import java.util.Map;
import java.util.logging.Formatter;
import java.util.logging.Level;
import java.util.logging.LogRecord;

import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

/**
 * Log formatter to match the format generated by the mesos master and slave:
 *
 * I0218 17:36:47.460234 (source) (message)
 *
 * @author bill
 */
public class LogFormatter extends Formatter {

  private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormat.forPattern(
    "MMdd kk:mm:ss.SSS"
  );

  /**
   * Build a level 'label' by taking the first character of the level name and making uppercase.
   */
  private static final Map<Level, String> LEVEL_LABELS = new MapMaker().makeComputingMap(
      new Function<Level, String>() {
        public String apply(Level level) {
          return String.valueOf(level.getName().charAt(0)).toUpperCase();
        }
      }
  );

  private static final int BASE_MESSAGE_LENGTH =
        1     // Level char.
        + 4   // Month + day
        + 1   // space
        + 12  // Timestamp
        + 1   // space
        + 6   // THREAD
        + 4   // Room for thread ID.
        + 1;  // space

  @Override
  public String format(final LogRecord record) {
    DateTime dt = new DateTime();

    int messageLength = BASE_MESSAGE_LENGTH
        + 2  // Colon and space
        + record.getMessage().length();
    if (record.getSourceClassName() != null) {
      messageLength += record.getSourceClassName().length();
      if (record.getSourceMethodName() != null) {
        messageLength += 1;  // Period between class and method.
        messageLength += record.getSourceMethodName().length();
      }
    }

    StringBuilder sb = new StringBuilder(messageLength)
        .append(LEVEL_LABELS.get(record.getLevel()))
        .append(DATE_TIME_FORMATTER.print(record.getMillis()))
        .append(" THREAD")
        .append(record.getThreadID());

    if (record.getSourceClassName() != null) {
      sb.append(' ').append(record.getSourceClassName());
      if (record.getSourceMethodName() != null) {
        sb.append('.').append(record.getSourceMethodName());
      }
    }

    sb.append(": ").append(formatMessage(record));
    if (record.getThrown() != null) {
      sb.append('\n').append(Throwables.getStackTraceAsString(record.getThrown()));
    }

    return sb.append('\n').toString();
  }

  private static String zeroPad(int value, int width) {
    return StringUtils.leftPad(String.valueOf(value), width, '0');
  }
}
